#+TITLE: macs
#+FILETAGS: core
* Overview
Macros for the macro-programmer.

This is a core library module.

Some of the symbols provided are copied directly from their original
source and annotated appropriately. It is not guaranteed that all
symbols perform exactly as the originals. Read the inline comments if
you're unsure.

- requires :: =sbcl 2.3.7+=

#+name: macs-collect-symbols
#+begin_src lisp :results output replace :wrap src lisp :exports nil :eval no
  ;; hg clone https://lab.rwest.io/ellis/macs && cd macs && sbcl
  (asdf:load-asd "macs.asd")
  (ql:quickload :macs)
  (ql:quickload :macs/rt)
  (ql:quickload :macs/tests)
  (in-package :macs-user)
  (use-package :macs.rt)
  (use-package :macs.tests)
  (in-readtable *macs-readtable*)
  (defmacro %m nil #`,(keywordicate ':macs. a1))
  (defun %ps () '(readtables reexport str sym list cond fu ana pan cli fs alien rt tests)) 
  (defun ps nil (mapcar (%m) (%ps)))
  (defun %s () #`,(cons a1 (loop for s being the external-symbols of (find-package a1) collect s)))
  (defun s nil (mapcar (%s) (ps)))
  (defmacro p (x) `(cdr (assoc (funcall (%m) ,x) (s))))
#+end_src

#+RESULTS: macs-collect-symbols 
#+begin_src lisp
To load "macs":
  Load 1 ASDF system:
    macs
; Loading "macs"

To load "macs/rt":
  Load 1 ASDF system:
    macs/rt
; Loading "macs/rt"

To load "macs/tests":
  Load 1 ASDF system:
    macs/tests
; Loading "macs/tests"

#+end_src

#+name: p
#+begin_src lisp :package macs-user :results output replace :var pkg='_ :exports nil :eval no :wrap src lisp
  (print (p pkg))
#+end_src

* Systems
** macs/readtables
*** macs.readtables
Named Readtable support. See the [[https://github.com/melisgl/named-readtables][official named-readtables repo]] for details.
** macs
*** macs
Wrapper package. Rexports =macs.*= including =macs.readtables=.
**** macs-user
A special user-space package where extensions, experiments and
prototype symbols can be defined.
*** macs.reexport
Symbol reexport support. See the [[https://github.com/takagi/cl-reexport/tree/master][cl-reexport repo]].
*** macs.str
String utilities. Re-exports from =sb-unicode=.
*** macs.sym
Symbol utilities.
*** macs.list
List utilities.
*** macs.cond
Various conditions, restarts, errors, and other utilities for
exception handling. See [[https://gigamonkeys.com/book/beyond-exception-handling-conditions-and-restarts.html][PCL]] for an introduction to conditions and
restarts.
*** macs.fu
The =fu= extension package. Includes macro utility functions from LOL,
alexandria, PCL, PG, custom readers, and a named-readtable called
=*macs-readtable*=.
*** macs.ana
Anaphoric macros.
*** macs.pan
Pandoric macros.
*** macs.cli
This package provides an API for building CLI apps. It is highly
opinionated and loosely derived from [[https://github.com/dnaeon/clingon][clingon]] and uiop.

- [2023-09-17 Sun] :: =completing-read= and =make-prompt!= added for
  CLI-based data entry

*** macs.alien
Foreign alien types, utils, and helpers.
** macs/rt
*** macs.rt
regression testing framework.
** macs/tests
You can run the tests with asdf:
#+begin_src shell :results output :exports both
  sbcl --noinform --non-interactive --eval '(asdf:load-system :macs/tests)' --eval '(asdf:test-system "macs")' 
#+end_src

#+RESULTS:
#+begin_example
in suite MACS with 14/14 tests:
#<PASS CLI-TEST153> 
#<PASS PAN-TEST152> 
#<PASS ANA-TEST151> 
#<PASS FMT-TEST150> 
#<PASS ALIEN-TEST149> 
#<PASS THREAD-TEST148> 
#<PASS REEXPORT-TEST147> 
#<PASS COND-TEST146> 
#<PASS LOG-TEST145> 
#<PASS LIST-TEST144> 
#<PASS STR-TEST143> 
#<PASS SYM-TEST142> 
#<PASS READTABLES-TEST141> 
#<PASS RT-TEST140> 
No tests failed.
#+end_example

*** macs.tests
macs System tests.
#+begin_src lisp :results output replace :wrap src lisp :exports code
  (load "tests.lisp")
  (in-package :macs.tests)
  (setq log:*log-level* :debug)
  (setq *catch-test-errors* t)
  (setq *compile-tests* nil)
  (do-tests :macs)
#+end_src

#+RESULTS:
#+begin_src lisp
in suite MACS with 15/15 tests:
:DEBUG @ 82954.8 :: running test:  #<TEST CLI :fn CLI-test4496 :args NIL :persist NIL {1008E426E3}> 
#<PASS CLI> 
:DEBUG @ 82954.8 :: running test:  #<TEST CLI-PROMPT :fn CLI-PROMPT-test4495 :args NIL :persist NIL {1008D95643}> 
#<PASS CLI-PROMPT> 
:DEBUG @ 82954.8 :: running test:  #<TEST PAN :fn PAN-test4494 :args NIL :persist NIL {1008D93693}> 
#<PASS PAN> 
:DEBUG @ 82954.8 :: running test:  #<TEST ANA :fn ANA-test4493 :args NIL :persist NIL {1008D91153}> 
#<PASS ANA> 
:DEBUG @ 82954.8 :: running test:  #<TEST FMT :fn FMT-test4492 :args NIL :persist NIL {1008C978D3}> 
#<PASS FMT> 
:DEBUG @ 82954.8 :: running test:  #<TEST ALIEN :fn ALIEN-test4491 :args NIL :persist NIL {1008C95DC3}> 
#<PASS ALIEN> 
:DEBUG @ 82954.8 :: running test:  #<TEST THREAD :fn THREAD-test4490 :args NIL :persist NIL {1008C945C3}> 
#<PASS THREAD> 
:DEBUG @ 82954.8 :: running test:  #<TEST REEXPORT :fn REEXPORT-test4489 :args NIL :persist NIL {1008C931B3}> 
#<PASS REEXPORT> 
:DEBUG @ 82954.8 :: running test:  #<TEST COND :fn COND-test4488 :args NIL :persist NIL {1008C91F03}> 
#<PASS COND> 
:DEBUG @ 82954.8 :: running test:  #<TEST LOG :fn LOG-test4487 :args NIL :persist NIL {1008C90903}> 
#<PASS LOG> 
:DEBUG @ 82954.8 :: running test:  #<TEST LIST :fn LIST-test4486 :args NIL :persist NIL {1008B672C3}> 
#<PASS LIST> 
:DEBUG @ 82954.8 :: running test:  #<TEST STR :fn STR-test4485 :args NIL :persist NIL {1008B65313}> 
#<PASS STR> 
:DEBUG @ 82954.8 :: running test:  #<TEST SYM :fn SYM-test4484 :args NIL :persist NIL {1008B63803}> 
#<PASS SYM> 
:DEBUG @ 82954.8 :: running test:  #<TEST READTABLES :fn READTABLES-test4483 :args NIL :persist NIL {1008B61853}> 
#<PASS READTABLES> 
:DEBUG @ 82954.8 :: running test:  #<TEST RT :fn RT-test4482 :args NIL :persist T {1008ACFD13}> 
#<PASS RT> 
No tests failed.
#+end_src

* Notes
- /Macros aren't about being needlessly terse/ :: \\
  Some people seem to think that once you hit a certain level of
  macs-ification you're just making your code unreadable to save on
  typing, or for the sake of codegolfing. This is not the case - the
  keypresses you can keep for free, but the /power/ comes from using
  macros to /think smarter/ and /faster/ about your problems.
- /Macros don't increase cognitive overhead/ :: \\
  They isolate it. For authors, the benefit of this is ten-fold. We
  write a complex syntax translation, understand it, and use it in
  our code. We don't use it to decrease code size, /we use it to
  simplify patterns/. It allows us to think in terms of the macro
  and skip a great deal of context switching and processing in our
  brains.
- /Blub macros don't come close to the gold standard/ :: \\
  which is *Unhygienic Lisp Macros*. Hygienic macros are an
  unfortunate inclusion of the Scheme specification.
- /Macros are not functions/ :: \\
  This, I credit to Paul Graham. I was actually just searching
  through the Arc [[http://www.arclanguage.org/tut.txt][tutorial]] for the term 'hygienic' because the
  implementation is in Racket and heard chatter of hygienic macros
  in Arc. I was delighted to find this passage:
  #+begin_quote
  One of the keys to understanding macros is to remember that macro
  calls aren't function calls.  Macro calls look like function calls.
  Macro definitions even look a lot like function definitions.  But
  something fundamentally different is happening.  You're transforming
  code, not evaluating it.  Macros live in the land of the names, not 
  the land of the things they refer to.    
  #+end_quote
- /Being terse has utility/ :: \\
  First a quick anecdote: I heard a story from a buddy about an
  individual who wrote some middleware in an extremely terse
  fashion - single letter symbols, one-liners, minimal comments,
  etc.

  I think it's hard to see a reality where that person isn't just
  trying to make a statement and piss off some people, without
  seeing the code or being familiar with the author - because if
  that's how your audience reacts, you're either doing it wrong, or
  being an ass.

  Stories like these are why I believe so many talented developers
  don't fully accept the dark arts of the terse. A bad experience
  which leaves a bitter taste.

  Another part of me thinks there are some social/psychological
  issues in play. Or alternatively, /developers write code for too
  broad of an audience/. Mainstream education encourages high-level
  code which is /optimized for human-readability/ - which isn't
  something I know for a fact but will be sure to ask around and
  report back. I think we can all agree this is a good thing to
  encourage in the classroom in very broad strokes.

  The problem is that I don't think we're doing a good job of
  teaching students how to break these rules, and why you would want
  to. Everyone seems to have this image of the ideal
  =production-quality-code-base= which is, as it turns out, a hell
  of a lot of work. Documentation to the nines. Descriptions in
  every commit. Whitespace! We are conditioned to associate
  human-readability with quality.

  When you're working with thousands of inexperienced contributors,
  yea put some weight on the ol' human interfaces. Take a team of 5
  experts and try that and now you're just overcharging the
  customer. It gets way more complicated every where in-between.
* Resources
  - [[https://alexandria.common-lisp.dev/][alexandria]]
  - [[https://edicl.github.io/cl-ppcre/][cl-ppcre]]
  - [[https://github.com/melisgl/named-readtables][named-readtables]]
  - [[https://github.com/takagi/cl-reexport/tree/master][cl-reexport]]
  - [[https://gigamonkeys.com/book/][PCL]]
  - [[https://letoverlambda.com/][LOL]] ([[https://github.com/thephoeron/let-over-lambda/tree/master][production version]])
  - [[https://sep.turbifycdn.com/ty/cdn/paulgraham/bellanguage.txt?t=1688221954&][Bel]]
  - [[https://wiki.c2.com/?LispMacro][c2 wiki on Lisp Macro]]
  - [[https://gitlab.common-lisp.net/asdf/asdf/][asdf]]
  - [[https://www.sbcl.org/manual/][sbcl manual]]
  - [[https://docs.rs/clap/latest/clap/][clap.rs docs]]

